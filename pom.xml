<?xml version="1.0" encoding="UTF-8"?>

<!-- There are 4 profiles: DEV,PROD,DEV-VSCODE -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>quanta</groupId>
	<artifactId>quanta</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>Quanta</name>
	<description>Quanta - Content Platform for the Web</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>

		<!--
			Tip: When upgrading this verison it's a good ideal to blow away
			the '.m2' hidden folder on your machine (maven cache) and also 
			enable this line in build.sh: "mvn dependency:sources", so you get
			all new source AND remove all the old stuff.

			WARNING: This version number is in BOTH pom files!
		-->
		<version>3.2.4</version>
		<relativePath />
	</parent>

	<!-- ========== DEV PROFILE BEGIN ========== -->
	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<!-- Prior to 4/5/2019 we had this profile as the default and the 'dev-vscode'
				profile didn't exist (below), for
				more info on why there is dev and dev-vscode profiles see the long comment below that is
				above the dev-vscode profile.
				-->
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<start-class>quanta.AppServer</start-class>
				<java.version>22</java.version>
			</properties>

			<dependencies>
				<dependency>
					<groupId>quanta</groupId>
					<artifactId>common</artifactId>
					<version>1.0</version>
					<type>pom</type>
				</dependency>

				<dependency>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
					<version>4.13.2</version>
					<scope>compile</scope>
				</dependency>

			</dependencies>

			<build>
				<filters>
					<filter>src/main/resources/application.properties</filter>
				</filters>

				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<excludes>
							<exclude>public/node_modules/**</exclude>
							<exclude>public/src/**</exclude>
						</excludes>
					</resource>
					<resource>
						<directory>src/main/java</directory>
						<excludes>
							<exclude>quanta/test/**</exclude>
						</excludes>
					</resource>
				</resources>

				<plugins>
					<!--
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
						<version>2.5.1</version>
						<configuration>
							<groupId>javax.validation</groupId>
							<artifactId>validation-api</artifactId>
							<version>1.1.0.Final</version>
							<packaging>jar</packaging>
							
							
							<file>${project.basedir}/jar/validation-api-1.1.0.Final.jar</file>
							<generatePom>true</generatePom>
						</configuration>
						<executions>
							<execution>
								<id>install-jar-lib</id>
								<goals>
									<goal>install-file</goal>
								</goals>
								<phase>validate</phase>
							</execution>
						</executions>
					</plugin>
-->

					<!-- uncomment this to start generating javadocs. -->
					<!-- <plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>3.3.1</version>
						<configuration>
							<reportOutputDirectory>./JavaDocs</reportOutputDirectory>
							<destDir>JavaDocs</destDir>
						</configuration>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin> -->

					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<layout>ZIP</layout>
						</configuration>
					</plugin>

					<!-- 
				WARNING: It appears that only ONE exec-maven-plugin runs. Having two of these plugins won't work,
					because it ends up 
				only running one of them. Don't know why. So just put ALL scripting stuff in this one file
				-->

				</plugins>
			</build>
		</profile>

		<!-- 
		This profile is for the purpose of updating /target/classes only so we can do a rapid server
		reload/iteration 
		
		========== JAVA-COMPILE PROFILE BEGIN ========== -->

		<profile>
			<id>java-compile</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<start-class>quanta.AppServer</start-class>
				<java.version>22</java.version>
			</properties>

			<dependencies>
				<dependency>
					<groupId>quanta</groupId>
					<artifactId>common</artifactId>
					<version>1.0</version>
					<type>pom</type>
				</dependency>

			</dependencies>

			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<!-- <configuration>
							<layout>ZIP</layout>
						</configuration> -->
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- ========== DEV-VSCODE PROFILE BEGIN ==========	-->
		<!-- This profile 'dev-vscode' is the one we activate by default so that when opening in
		VSCode 
		UPDATE: There ended up being an additional need for this profile to the above, which is the fact
		that it can compile the Java
		and run the typescript-generator-maven-plugin to generate the generated TypeScript Interfaces,
		without vite trying to run first
	    which can potentially have outdated (old) generated file, and fail.
		-->
		<profile>
			<id>dev-vscode</id>
			<activation>
				<!-- I think i added this 'default' designation so that IDEs can build always even
				when no specific build config is being run 
				-->
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<start-class>quanta.AppServer</start-class>
				<java.version>22</java.version>
			</properties>

			<dependencies>
				<dependency>
					<groupId>quanta</groupId>
					<artifactId>common</artifactId>
					<version>1.0</version>
					<type>pom</type>
				</dependency>
			</dependencies>

			<build>
				<filters>
					<filter>src/main/resources/application.properties</filter>
				</filters>

				<resources>
					<resource>
						<directory>src/main/resources</directory>

						<excludes>
							<exclude>public/node_modules/**</exclude>
							<exclude>public/src/**</exclude>
						</excludes>

					</resource>
				</resources>

				<plugins>
					<plugin>
						<groupId>cz.habarta.typescript-generator</groupId>
						<artifactId>typescript-generator-maven-plugin</artifactId>
						<version>3.2.1263</version>
						<executions>
							<execution>
								<!-- This 'ignore' line is a fix for an apparent bug in VSCode (or maven) intrepretatino of this line
								 and is only here to stop the IDE from reporting a warning here. -->
								<?m2e ignore?>
								<id>generate</id>
								<goals>
									<goal>generate</goal>
								</goals>
								<phase>process-classes</phase>
							</execution>
						</executions>
						<configuration>
							<optionalAnnotations>
								<annotation>javax.annotation.Nullable</annotation>
							</optionalAnnotations>
							<jsonLibrary>jackson2</jsonLibrary>

							<!-- Supposedly this will allow @JsonProperty(required = false) in the
							java to put a '?' after the param
								but unfortunately it doesn't default to 'true' as one would expect, so for now I'll leave it out
							    to get maximal typesafety
							<optionalProperties>useLibraryDefinition</optionalProperties>
							-->
							<classPatterns>
								<pattern>quanta.model.client.**</pattern>
								<pattern>quanta.rest.**</pattern>
							</classPatterns>
							<outputKind>module</outputKind>
							<outputFile>src/main/resources/public/src/JavaIntf.ts</outputFile>
							<outputFileType>implementationFile</outputFileType>

							<!-- <mapClasses>asClasses</mapClasses>
        						<nonConstEnums>true</nonConstEnums>
        						<optionalProperties>useLibraryDefinition</optionalProperties>-->

							<mapEnum>asEnum</mapEnum>
							<jackson2Configuration>
								<enumsUsingToString>true</enumsUsingToString>
							</jackson2Configuration>
							<noFileComment>true</noFileComment>
						</configuration>
					</plugin>
					<!--
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
						<version>2.5.1</version>
						<configuration>
							<groupId>javax.validation</groupId>
							<artifactId>validation-api</artifactId>
							<version>1.1.0.Final</version>
							<packaging>jar</packaging>
							
							
							<file>${project.basedir}/jar/validation-api-1.1.0.Final.jar</file>
							<generatePom>true</generatePom>
						</configuration>
						<executions>
							<execution>
								<id>install-jar-lib</id>
								<goals>
									<goal>install-file</goal>
								</goals>
								<phase>validate</phase>
							</execution>
						</executions>
					</plugin>
-->

					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
					</plugin>
					<!-- 
				WARNING: It appears that only ONE exec-maven-plugin runs. Having two of these plugins won't work,
					because it ends up 
				only running one of them. Don't know why. So just put ALL scripting stuff in this one file
				-->

				</plugins>
			</build>
		</profile>

		<!-- ========== PROD PROFILE BEGIN ========== -->
		<profile>
			<id>prod</id>
			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<start-class>quanta.AppServer</start-class>
				<java.version>22</java.version>
			</properties>

			<dependencies>
				<dependency>
					<groupId>quanta</groupId>
					<artifactId>common</artifactId>
					<version>1.0</version>
					<type>pom</type>
				</dependency>

			</dependencies>

			<build>
				<filters>
					<filter>src/main/resources/application.properties</filter>
				</filters>

				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<excludes>
							<exclude>public/node_modules/**</exclude>
							<exclude>public/src/**</exclude>
						</excludes>
					</resource>
					<resource>
						<directory>src/main/java</directory>
						<excludes>
							<exclude>quanta/test/**</exclude>
						</excludes>
					</resource>
				</resources>

				<plugins>
					<!--
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
						<version>2.5.1</version>
						<configuration>
							<groupId>javax.validation</groupId>
							<artifactId>validation-api</artifactId>
							<version>1.1.0.Final</version>
							<packaging>jar</packaging>
							
							
							<file>${project.basedir}/jar/validation-api-1.1.0.Final.jar</file>
							<generatePom>true</generatePom>
						</configuration>
						<executions>
							<execution>
								<id>install-jar-lib</id>
								<goals>
									<goal>install-file</goal>
								</goals>
								<phase>validate</phase>
							</execution>
						</executions>
					</plugin>
	-->

					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
					</plugin>
					<!-- 
				WARNING: It appears that only ONE exec-maven-plugin runs. Having two of these plugins won't work,
					because it ends up 
				only running one of them. Don't know why. So just put ALL scripting stuff in this one file
				-->

				</plugins>
			</build>

		</profile>

	</profiles>
</project>