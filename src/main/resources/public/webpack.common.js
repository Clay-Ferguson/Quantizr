const path = require("path");
const CircularDependencyPlugin = require("circular-dependency-plugin");

const prod = process.argv.indexOf("-p") !== -1;
const env = prod ? "prod" : "dev";

console.log("TARGET ENV: " + env);

module.exports = {
    entry: "./ts/index.tsx",

    output: {
        filename: "bundle.js",
        path: __dirname
    },

    resolve: {
        // Add '.ts' and '.tsx' as resolvable extensions.
        extensions: [".tsx", ".ts", ".js", ".json"]
    },

    module: {
        rules: [
            // All files with a '.ts' or '.tsx' extension will be handled by 'awesome-typescript-loader'.
            {
                test: /\.tsx?$/,
                use: [{
                    loader: "awesome-typescript-loader",
                    options: {
                        // Use this to point to your tsconfig.json.
                        configFileName: "./tsconfig." + env + ".json"
                    }
                }],
                exclude: /node_modules/
            },

            // this pattern may be reqiured for newer versions...
            // //////////////////////
            // {
            //     test: /\.tsx?$/,
            //     loader: "ts-loader",
            //     options: {
            //         // Use this to point to your tsconfig.json.
            //         configFile: "tsconfig." + env + ".json"
            //     },
            //     exclude: /node_modules/
            // },
            // //////////////////////

            // All output '.js' files will have any sourcemaps re-processed by 'source-map-loader'.
            {
                test: /\.js$/,
                enforce: "pre",
                use: [{
                    loader: "source-map-loader"
                }]
            },

            {
                test: /\.css$/i,
                use: [{
                    loader: "style-loader"
                }, {
                    loader: "css-loader"
                }]
            },

            {
                test: /\.htm$/,
                use: [{
                    loader: "html-loader"
                }]
            }
        ]
    },

    plugins: [
        new CircularDependencyPlugin({
            // `onDetected` is called for each module that is cyclical
            onDetected({ module: webpackModuleRecord, paths, compilation }) {
                // `paths` will be an Array of the relative module paths that make up the cycle
                // `module` will be the module record generated by webpack that caused the cycle
                var fullPath = paths.join(" -> ");
                if (fullPath.indexOf("node_modules") === -1) {
                    compilation.errors.push(new Error("CIRC. REF: " + fullPath));
                }
            }
        })
    ]
};
