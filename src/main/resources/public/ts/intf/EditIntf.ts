import * as J from "../JavaIntf";
import { AppState } from "../AppState";

export interface EditIntf {
    showReadOnlyProperties: boolean;

    saveClipboardToChildNode(parentId?: string): void;
    splitNode(node: J.NodeInfo, splitType: string, delimiter: string, state: AppState): Promise<void>;
    joinNodes(state?: AppState): Promise<void>;
    openChangePasswordDlg(state: AppState): void;
    openManageAccountDlg(state: AppState): void;
    editPreferences(state: AppState): void;
    openImportDlg(state: AppState): void;
    openExportDlg(state: AppState): void;
    isEditAllowed(node: any, state: AppState): boolean;
    isInsertAllowed(node: any, state: AppState): boolean;
    startEditingNewNode(typeName: string, createAtTop: boolean, parentNode: J.NodeInfo, nodeInsertTarget: J.NodeInfo, ordinalOffset: number, state: AppState): void;
    insertNodeResponse(res: J.InsertNodeResponse, state: AppState): void;
    createSubNodeResponse(res: J.CreateSubNodeResponse, forceUsePopup: boolean, replyToId: string, state: AppState): void;
    saveNodeResponse(node: J.NodeInfo, res: J.SaveNodeResponse, allowScroll: boolean, state: AppState): void;
    toggleEditMode(state: AppState): void;
    setRssHeadlinesOnly(state: AppState, val: boolean): Promise<void>;
    toggleShowMetaData(state: AppState): void;
    setMainPanelCols(val: number): void;
    moveNodeUp(evt: Event, id: string, state?: AppState): Promise<void>;
    moveNodeDown(evt: Event, id: string, state?: AppState): void;
    moveNodeToTop(id: string, state: AppState): void;
    moveNodeToBottom(id: string, state: AppState): void;
    getFirstChildNode(state: AppState): any;
    getLastChildNode(state: AppState): any;
    runEditNodeByClick(evt: Event, id: string, state?: AppState): void;
    runEditNode(evt: Event, id: string, forceUsePopup: boolean, encrypt: boolean, showJumpButton: boolean, replyToId: string, state?: AppState): void;
    insertNode(id: string, typeName: string, ordinalOffset: number, state?: AppState): void;
    toolbarInsertNode(evt: Event, id: string): void;
    createSubNode(id: any, typeName: string, createAtTop: boolean, parentNode: J.NodeInfo, state: AppState): void;
    selectAllNodes(state: AppState) : void;
    deleteSelNodes(evt: Event, nodeId: string): Promise<void>;
    cutSelNodes(evt: Event, id: string): void;
    undoCutSelNodes(): void;
    pasteSelNodesInside(evt: Event, id: string);
    pasteSelNodes(nodeId: string, location: string, state?: AppState): Promise<void>;
    pasteSelNodes_InlineAbove(evt: Event, id: string);
    pasteSelNodes_Inline(evt: Event, id: string);
    insertBookWarAndPeace(state: AppState): Promise<void>;
    clearInbox(state: AppState): Promise<void>;
    newSubNode(evt: Event, id: string): Promise<void>;
    addNode(nodeId: string, content: string, shareToUserId: string, replyToId: string, state: AppState): void;
    createNode(node: J.NodeInfo, typeName: string, forceUsePopup: boolean, pendingEdit: boolean, payloadType: string, content: string, state: AppState): void;
    addCalendarEntry(initDate: number, state: AppState): void;
    moveNodeByDrop(targetNodeId: string, sourceNodeId: string, location: string, refreshCurrentNode: boolean): Promise<void>;
    initNodeEditResponse(res: J.InitNodeEditResponse, forceUsePopup: boolean, encrypt: boolean, showJumpButton: boolean, replyToId: string, state: AppState): void;
    updateHeadings(state: AppState): Promise<void>;
    addLinkBookmark(content: string, state: AppState): void;
    addBookmark(node: J.NodeInfo, state: AppState): void;
    setMetadataOption(val: boolean): void;
    refreshNodeFromServer(nodeId: string): Promise<void>;
    editNodeSharing(state: AppState, node?: J.NodeInfo): void;
    addCipherKeyToNode(node: J.NodeInfo, principalPublicKeyStr: string, principalNodeId: string): Promise<void>;
}
