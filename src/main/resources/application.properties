# NOTE: All of these properties are overridable in the docker compose yaml files, so really we
# don't need any of the settings in file file, and theoretically could just move ALL of these settings to the yaml

# The Spring devepers stupidly decided to disallow spring beans to depend on each other
# and this setting is required to disable that stupid decision, hopefully harmlessly.
# (Quanta would have to change many many thousands of lines of code to adhere
# to any rediculous curcular ref compliance)

server.shutdown=graceful

# leaving as default 30s
# spring.lifecycle.timeout-per-shutdown-phase=1m

mongoTest=false

rsaKeyFolder=.

mongoAdminUserName=admin

#important: Server admin must put content here, to provide the default page for anonymous users
anonUserLandingPageNode=:home

mailBatchSize=10
throttleTime=2000

# WARNING: The server.servlet.session.timeout is referenced directly
# in our java code and sent to the client so client knows the timeout from this, so we ALWAYS need this
# defined here and can't just omit to use spring default.
#
# WARNING: Using MINUTES is required here too!!! (because we have java code expecting that)
server.servlet.session.timeout=60m

spring.mvc.async.request-timeout = 3600000

server.error.path=/error

# spring.resources.static-locations=classpath:/public/,file:///dev-resource-base/

spring.data.redis.database=0
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD}
spring.data.redis.timeout=60000

spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.transaction.default-transaction-manager-name=transactionManager


spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.generate-ddl: false
spring.jpa.hibernate.ddl-auto: none
# spring.jpa.hibernate.bytecode.use_reflection_optimizer=false

spring.flyway.enabled=true

# NOTE: If you need to run Quanta and start with a DB that already has some tables in it, you will need to set
# this to true (for the first run only?) or else flyway initialization will fail, and the app won't even start.
# NOTE: Also when I did this baseline I had a V1__init.sql file in the db/migration folder, and that file
# and even with 'baseline-on-migrate=true' it I needed to still MANULALLY run the V1__init.sql commands 
# in the DB to get the DB to the state that flyway would expect it to be in. I may be slightly confused.
# spring.flyway.baseline-on-migrate=true

spring.flyway.locations=db/migration

runJUnit=
