version: '3.7'
services:
    redis-distro:
        image: redis:7.2
        deploy:
            restart_policy:
                condition: on-failure
                # delay is time between restart attempts
                delay: 10s
                max_attempts: 4
                window: 120s
            replicas: 1
        hostname: redis-host-distro
        networks:
            bridge:
                aliases:
                    - redis-host-distro
        ports:
            - "${REDIS_PORT}:${REDIS_PORT}"
        
        # Saves to disk every 20 seconds (if 1 or more writes done)
        # command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
        
        command: redis-server --port ${REDIS_PORT} --loglevel warning --requirepass ${REDIS_PASSWORD}
        environment:
            REDIS_HOST: "${REDIS_HOST}"
            REDIS_PORT: "${REDIS_PORT}"
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            
        # todo-a: start using a cache folder
        # volumes: 
        #     - cache:/data

    mongo-distro: 
        image: mongo:6.0.8
        deploy:
            restart_policy:
                condition: on-failure
                # delay is time between restart attempts
                delay: 10s
                max_attempts: 4
                window: 120s
            replicas: 1
        hostname: mongo-host-distro
        networks:
            bridge:
                aliases:
                    - mongo-host-distro
        # WARNING: volumes will not handle '~' character for home folder. Do not use.
        volumes:
            - '${MONGO_DATA}:/data/db'
            - '${MONGOD_CONF}:/etc/mongod.conf'
            - '${MONGO_BACKUP}:/backup'
            - '${MONGO_KEY}:/data/mongo-key:ro'
            - '${INIT_REPLICA}:/init/init-replica.sh'

        # command: mongod --config /etc/mongod.conf
        command: ["--config", "/etc/mongod.conf"]

        #entrypoint: ["mongod","--config","/etc/mongod.conf"]
        # don't publish to outside world
        # ports:
        #     - '${MONGO_PORT}:${MONGO_PORT}'

        # NOTE: Leave this as an example of how to read env from a file.    
        # env_file: 
        #     - '???/mongo.env'
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: ${mongoPassword}

    pgdb-distro:
        image: postgres
        deploy:
            # Don't want a restart policy for DEV!
            # restart_policy:
            #     condition: on-failure
            #     # delay is time between restart attempts
            #     delay: 10s
            #     max_attempts: 4
            #     window: 120s
            replicas: 1
        hostname: pgdb-host-distro
        networks:
            bridge:
                aliases:
                    - pgdb-host-distro
        environment:
            - POSTGRES_USER=quanta-pg
            - POSTGRES_PASSWORD=${pgPassword}
        logging:
            options:
                max-size: 10m
                max-file: "3"
        # expose to host machine for management.
        ports:
            - '5432:5432'
        volumes: 
            - '${POSTGRES_DATA}:/var/lib/postgresql/data'

    pgadmin4:
        image: dpage/pgadmin4:latest
        depends_on:
            - pgdb-distro
        environment:
            PGADMIN_DEFAULT_EMAIL: ${pgAdminEmail}
            PGADMIN_DEFAULT_PASSWORD: ${pgAdminPassword}
        ports:
            - '${PGADMIN_PORT}:80'
        networks:
            - bridge
        volumes:
            - '${PGADMIN_DATA}/:/var/lib/pgadmin'

    quanta-distro:
        image: ${DOCKER_IMAGE}
        depends_on:
            - redis-distro
            - mongo-distro
            - pgdb-distro
            - qai-distro
        build: 
            context: ${PRJROOT}
            args:
                PORT: "${PORT}"
                PORT_DEBUG: "${PORT_DEBUG}"
                XMS: "${XMS}"
                XMX: "${XMX}"
            dockerfile: ./dockerfile-distro
        deploy:
            restart_policy:
                condition: on-failure
                # delay is time between restart attempts
                delay: 10s
                max_attempts: 4
                window: 120s
            replicas: 1
        # healthcheck:
        #     test: ["CMD", "curl", "-f", "http://quanta-host:${PORT}/health"]
        #     interval: 10m
        #     timeout: 10s
        #     retries: 3
        #     start_period: 20s
        hostname: quanta-host
        networks:
            bridge:
                aliases:
                    - quanta-host
        volumes:
            - "${DEPLOY_TARGET}/tmp:/tmp"
            - "${DEPLOY_TARGET}/log:/log"
            - '${DEPLOY_TARGET}/config:/config'

        ports:
            - '${HOST_PORT}:${PORT}'
            # Uncomment for debugging...
            # - '8000:8000'
        
        environment:
            # Docker warm vars
            X_NODE_ID: "{{.Node.ID}}"
            X_NODE_HOSTNAME: '{{.Node.Hostname}}'
            X_SERVICE_ID: '{{.Service.ID}}'
            X_SERVICE_NAME: '{{.Service.Name}}'
            X_TASK_SLOT: "{{.Task.Slot}}"
            X_TASK_ID: '{{.Task.ID}}'
            X_TASK_NAME: '{{.Task.Name}}'

            QUANTA_VER: "${QUANTA_VER}"
            logging.config: /log/logback.xml
            XMS: "${XMS}"
            XMX: "${XMX}"

            REDIS_HOST: "${REDIS_HOST}"
            REDIS_PORT: "${REDIS_PORT}"
            REDIS_PASSWORD: "${REDIS_PASSWORD}"

            SPRING_DATASOURCE_URL: "jdbc:postgresql://pgdb-distro:5432/quanta-pg"
            SPRING_DATASOURCE_USERNAME: "quanta-pg"
            SPRING_DATASOURCE_PASSWORD: ${pgPassword}

            adminPassword: "${adminPassword}"
            mongoPassword: "${mongoPassword}"
            devEmail: "${devEmail}"
            OPENAI_API_KEY: "${OPENAI_API_KEY}"
            PPLX_API_KEY: "${PPLX_API_KEY}"
            ANTH_API_KEY: "${ANTH_API_KEY}"
            GEMINI_API_KEY: "${GEMINI_API_KEY}"
            mongoSecurity: "true"
            rssPreCacheEnabled: "false"
            aiAgentEnabled: "true"

            # WARNING: Most browsers (other than Firefox) will not support crypto unless you're on HTTPS
            # requireCrypto: "true"

            # NOTE: '>-' removes all newline characters and makes one long string
            # Using '|' there instead would preserve the newlines after read in
            # The '-' after either of those removes any trailing newline
            testUserAccounts: >-
                adam:${testPassword}:${devEmail},
                bob:${testPassword}:${devEmail},
                cory:${testPassword}:${devEmail},
                dan:${testPassword}:${devEmail},
                eric:${testPassword}:${devEmail}
    
            # throttleTime: "0"
            spring.config.location: "classpath:/application.properties" 
            mongodb.host: "${MONGO_HOST}"
            mongodb.port: "${MONGO_PORT}" 
            quantaAI.host: "${QAI_HOST}"
            quantaAI.port: "${QAI_PORT}" 
            instanceId: "prod"
            profileName: "prod"
            server.port: "${PORT}" 
            httpProtocol: "http" 
            metaHost: "${quanta_domain}" 
            allowFileSystemSearch: "false"

            spring.http.multipart.max-file-size: "200MB" 
            spring.http.multipart.max-request-size: "200MB" 
            spring.servlet.multipart.max-file-size: "200MB"
            spring.servlet.multipart.max-request-size: "200MB"
            adminDataFolder: "/tmp" 

            # mail.port: ""
            # mail.user: "your mail user" 
            # mail.password: "${emailPassword}" 
            # mail.host: "your host" 
            # mail.from: "your address"

            # Uncomment for debugging... (don't forget to open ufw firewall for port on server)
            #JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,address=0.0.0.0:8000,server=y,suspend=n"

    # Quanta AI Microservice (Encapsulates Python LangChain)
    qai-distro:
        image: ${QAI_IMAGE}
        build: 
            context: ${PRJROOT}
            args:
                QAI_HOST: "${QAI_HOST}"
                QAI_PORT: "${QAI_PORT}"
            dockerfile: ./dockerfile-qai
        deploy:
            # Don't want a restart policy for DEV!
            # restart_policy:
            #     condition: on-failure
            #     # delay is time between restart attempts
            #     delay: 10s
            #     max_attempts: 4
            #     window: 120s
            replicas: 1
        hostname: qai-host-distro
        networks:
            bridge:
                aliases:
                    - qai-host-distro
        environment:
            QAI_HOST: "${QAI_HOST}"
            QAI_PORT: "${QAI_PORT}"
            PYTHONUNBUFFERED: 1
            
        logging:
            options:
                max-size: 10m
                max-file: "3"
        ports:
            - '${QAI_PORT}:${QAI_PORT}'

        volumes:
            - /home/clay/ferguson/Quantizr/src:/projects
            - /home/clay/quanta-localhost-dev/log:/data
            - "${DEPLOY_TARGET}/log:/log"
networks:
    bridge:
