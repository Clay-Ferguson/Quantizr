version: '3.7'
services:

    mongo-prod: 
        container_name: mongo-prod
        # WARNING: volumes will not handle '~' character for home folder. Do not use.
        volumes:
            - '/var/lib/mongodb:/data/db'
            - '${DATA_FOLDER}/mongo-dumps:/mongo-dumps'
            - '${INSTANCE_FOLDER}/mongo-scripts:/mongo-scripts'
            - '${INSTANCE_FOLDER}/mongod.conf:/etc/mongod.conf'
        command: mongod --config /etc/mongod.conf
        ports:
            - '27017:27017'
        env_file: 
            - '../secrets/mongo.env'
        networks:
            - net-prod
        # Always specify version of mongo. When it upgrades automatically there can be database issues that need to be resolved
        # and we don't want that happening unexpectedly
        image: mongo:4.0

    # https://hub.docker.com/r/ipfs/go-ipfs/
    ipfs: 
        container_name: ipfs 
        environment:
            # From go-ipfs github developer: 
            #    Enabling the "lowpower" profile should help. That will disable background data reproviding, set really 
            #    low connection manager limits, and put your node into dhtclient mode.
            routing: "dhtclient" 
            IPFS_PROFILE: "server"
            IPFS_PATH: "/data/ipfs"
        # expose:
        #    - '4001'
        #     - '8080'
        #     - '5001'
        volumes:
            - '${ipfs_staging}:/export'
            - '${ipfs_data}:/data/ipfs'
        #ports:
        #    - "4001:4001"
        #    - "8080:8080"
        #    - "5001:5001"
        networks:
            - net-prod
        image: ipfs/go-ipfs:v0.7.0

    quanta-prod:
        build: 
            context: .
            dockerfile: dockerfile-prod
        container_name: quanta-prod
        expose:
            - '${PORT_SEC}'
            - '${PORT}'
            
            # Uncomment for debugging...
            # - '8000'
        # WARNING: volumes will not handle '~' character for home folder. Do not use.
        volumes:
            - '${DATA_FOLDER}/docs:/docs'
            - '${DATA_FOLDER}/tmp:/tmp'
            - '${DATA_FOLDER}/log:/log'
            - '${DATA_FOLDER}/config:/config'
            - '/etc/letsencrypt/live/${quanta_domain}:/letsencrypt'

             # This maps '/app' to be the current folder where you run docker from (where the yaml file is normally)
            - $PWD:/app
        ports:
            - '${PORT_SEC}:${PORT_SEC}'
            - '${PORT}:${PORT}'

            # Uncomment for debugging...
            # - '8000:8000'
        networks:
            - net-prod
        environment:
            mongoAdminPassword: "${subnodePassword}"
            mongoSecurity: "true"

            # NOTE: '>-' removes all newline characters and makes one long string
            testUserAccounts: >- 
                adam:${testPassword}:${devEmail},
                bob:${testPassword}:${devEmail},
                cory:${testPassword}:${devEmail},
                dan:${testPassword}:${devEmail}

            spring.config.location: "classpath:/application.properties" 
            mongodb.host: "mongo-prod" 
            mongodb.port: "27017"
            profileName: "prod" 
            server.port: "${PORT_SEC}" 
            httpProtocol: "https" 
            metaHost: "${quanta_domain}" 
            reSaveAll: "false"
            allowFileSystemSearch: "false" 
            forceIndexRebuild: "false"
            actPubEnabled: "true"
            spring.http.multipart.max-file-size: "200MB" 
            spring.http.multipart.max-request-size: "200MB" 
            spring.servlet.multipart.max-file-size: "200MB"
            spring.servlet.multipart.max-request-size: "200MB"
            adminDataFolder: "/tmp" 
            
            # Uncomment for debugging... (don't forget to open ufw firewall for port on server, and only from your own IP)
            # sudo ufw allow from xxx.xxx.xxx.xxx to any port 8000
            # JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,address=0.0.0.0:8000,server=y,suspend=n"
            
            ipfs.host: "http://ipfs"
            ipfs.apiPort: "5001"
            ipfs.gatewayPort: "8080"

            security.require-ssl: "true" 
            server.ssl.key-store: "/letsencrypt/keystore.p12" 
            server.ssl.key-store-password: "${prodKeyStorePassword}" 
            server.ssl.keyStoreType: "PKCS12" 
            server.ssl.keyAlias: "tomcat" 

            mail.port: ""
            mail.user: "postmaster@quantizr.com"
            mail.password: "${emailPassword}" 
            mail.host: "smtp.mailgun.org" 
            mail.from: "admin@quanta.wiki"

            # This is the node name for a feed like this: http://localhost/multiRss?id=:podcast-set to cause that feed to precache
            rssAggregatePreCacheNodeId: ":idw"

        image: quanta-prod
        depends_on:
            - mongo-prod
            - ipfs

# https://docs.docker.com/compose/networking/

networks:
  net-prod:
    driver: bridge
    external: false
    name: net-prod

# To force compose to use an externally pre-created network outside this compose file you can do this
# networks:
#   default:
#     external:
#       name: my-pre-existing-network
